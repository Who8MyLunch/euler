
from __future__ import division, print_function #, unicode_literals

"""
Even Fibonacci numbers

Each new term in the Fibonacci sequence is generated by adding the previous
two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed
four million, find the sum of the even-valued terms.

"""

import numpy as np

# Helpers.
class Fibber(object):
    def __init__(self, v_max):
        self.v_max = v_max
        self.v_a = None
        self.v_b = None
        self._values = None


    def _generator(self):
        self.v_a = 1
        self.v_b = 2

        yield self.v_a
        yield self.v_b

        while True:
            v_new = self.v_a + self.v_b
            self.v_a = self.v_b
            self.v_b = v_new

            if v_new < self.v_max:
                yield v_new
            else:
                return


    @property
    def values(self):
        if not self._values:
            self._values = self._generator()
        return self._values


# Setup.
value_max = 4000000


fibb = Fibber(value_max)
a = fibb.values

answer = 0
for v in a:
    if v % 2:
        print('no:  {:d}'.format(v))
    else:
        print('yes: {:d}'.format(v))
        answer += v


# Do it.

print('\nThe answer: {:d}'.format(answer))

# Done.
